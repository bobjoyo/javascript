1장. 자바스크립트의 역사와 현재 그리고 미래
- Chrome JIT(just-in-compilation) 엔진 포함
자바스크립트 실행속도가 엄청 빠른 엔진 포함한 브라우저

- Chrome V8 JS 엔진은
node , electron 에서도 이용됨.

- 2015년 ECMAScript6 등장 (ES6)

- Babel: javascript tanscompiler
시장에서 다양한 사용자는 다양한 브라우저, 최신브라우저를
사용하는 것이 아님.
개발자는 최신 버전의 ECMAScript6 를 쓰고
배포할 때만 javascript tanscompiler 를 이용해서
최신버전을 아래버전의 ecs 로 변환해줌

- SPA(single page application): 하나의 페이지에서
데이터를 받아와 부분적으로 업데이트
이를 쉽게하기 위해 react, angular 등이 나옴

2장.
html 에서 javascript를 포함할 때 어떻게
포함하는게 효율적일까?

- 스크립트 파일이 head 안에 있는 경우
    브라우저가 html을 한줄한줄 분석함. -> parsing 
    <script src=main.js></script>
    한줄 한줄 분석하다가 위와 같이 script 파일을 만나면
    js 파일을 다운받아야하네? 하고 이해함.
    html 을 파싱하는것을 잠시 멈추고 서버에서
    js 파일을 다운로드 받은 후 (fetching js)
    js 파일을 실행 한 후 (executing js)
    다시 html 파싱시작함.

    -> 사용자가 html 웹페이지를 보는데 시간이 걸림
    따라서 script를 head에 포함하는것이 좋은게 아님

- 스크립트 파일이 body 안에 (끝쪽)있는 경우
    html을 쭉 파싱 후 body 끝쪽에서 스크립트 파일을
    만나서 js 파일을 그때 다운로드 후 실행

    -> html 웹 컨텐츠를 사용자가 빠르게 볼 수
       있는 것은 좋지만 웹 사이트가 js에 의존적이라면
       안좋음, 즉 사용자가 의미있는 컨텐츠를 보는데 까지
       오래걸리는 단점

- 스크립트 파일이 head 안에 있되 속성값 asyn 사용
    <script asyn src=main.js></script>
    asyn 옵션은 boolean 타입이기 때문에 이렇게
    선언하는 것만으로 true 때문에 사용가능.

    브라우저가 html 다운 받아 파싱 중 스크립트파일
    을 만나면 어? asyn가 있네? 하고 js를 다운받아
    놓고 다시 html 다시 파싱하다가 js 파일이
    다운로드 되면 그때 파싱을 멈추가 js 파일을 실행
    실행을 다 한후 나머지 html 파싱

    -> body 끝에 사용하는 것보다 js 파일 다운로드가
    병렬적으로 일어나기 때문에 다운로드 시간 절약가능
    하지만 js가 html 파일이 모두 파싱되기전에 실행이
    되기때문에 에러 발생가능성이있음(js가 실행하려 하는데
    정의되있지 않을 수 있음)

- 스크립트 파일이 head 안에 있되 속성값 defer 사용
    <script defer src=main.js></script>
    브라우저가 html 다운 받아 파싱 중 스크립트파일
    을 만나면 어? defer가 있네? 하고 js를 다운받아
    놓고 다시 html 파일을 끝까지 모두 파싱 후에
    js파일을 실행
    이것이 가장 좋은 옵션.

    html을 파싱하는 동안 js를 다운로드 받아놓고(fetching)
    html을 모두 파싱하여 컨텐츠를 사용자에게 보여주고
    js를 실행시킴


- asyn 다수를 실행 시키면
(정의된 스크립트 순서와 상관없이) 먼저 다운로드 된 js파일을 실행시킴
이러면 js파일이 순서에 의존적이라면 asyn 옵션을 쓰다보면
문제가 될 수 있음

- defer 다수 실행
파싱하는 동안 필요한 js 파일을 다 받은 후
정의한 순서대로 실행시키기 때문에 효율적,안정적

